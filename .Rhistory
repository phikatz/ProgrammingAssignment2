?getmean
?setmean
?get
?set
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
h4 <- list(set = set, get = get,
setmean = setmean,
getmean = getmean)
print(h4)
}
vect1 <- makeVector(c(1:7))
makeCacheMatrix <- function(x = matrix()) {
nvrse <- NULL
set <- function(y) {
x<<-y
nvrse<<-NULL
}
get <- function() x
setInverse <- function(solve) nvrse <<- solve
getInverse <- function() nvrse
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## Write a short comment describing this function
##This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above.
##If the inverse has already been calculated (and the matrix has not changed),
##then `cacheSolve` should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
nvrse <- x$getinverse()
if(!is.null(nvrse)){
message("getting cached data")
return(nvrse)
}
data <- x$get()
nvrse(solve(data, ...))
x$setinverse(nvrse)
nvrse
}
?matrix
tst1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(tst1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
nvrse <- x$getInverse()
if(!is.null(nvrse)){
message("getting cached data")
return(nvrse)
}
data <- x$get()
nvrse(solve(data, ...))
x$setInverse(nvrse)
nvrse
}
cacheSolve(tst1)
makeCacheMatrix <- function(x = matrix()) {
nvrse <- NULL
set <- function(y) {
x<<-y
nvrse<<-NULL
}
get <- function() x
setInverse <- function(solve) nvrse <<- solve
getInverse <- function() nvrse
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
nvrse <- x$getInverse()
if(!is.null(nvrse)){
message("getting cached data")
return(nvrse)
}
data <- x$get()
nvrse(solve(data, ...))
x$setInverse(nvrse)
nvrse
}
tst1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(tst1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
nvrse <- x$getInverse()
if(!is.null(nvrse)){
message("getting cached data")
return(nvrse)
}
data <- x$get()
nvrse <- (solve(data, ...))
x$setInverse(nvrse)
nvrse
}
tst1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(tst1)
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:6, nrow=2, ncol=3))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:9, nrow=3, ncol=3))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:8, nrow=3, ncol=3))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:6, nrow=3, ncol=3))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:6, nrow=2, ncol=2))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(2:6, nrow=2, ncol=2))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(2:5, nrow=2, ncol=2))
cacheSolve(tst1)
tst1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(tst1)
